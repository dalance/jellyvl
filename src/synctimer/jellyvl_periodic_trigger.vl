module periodic_trigger #(
    parameter TIMER_WIDTH : u32 = 64,
    parameter PERIOD_WIDTH: u32 = 32,
) (
    reset: input logic,
    clk  : input logic,

    enable: input logic              ,
    phase : input logic<PERIOD_WIDTH>,
    period: input logic<PERIOD_WIDTH>,

    current_time: input logic<TIMER_WIDTH>,

    trigger: output logic,
) {

    localparam t_period: type = logic<PERIOD_WIDTH>;
    localparam t_count : type = signed logic<PERIOD_WIDTH + 1>;

    var next_time: t_period;

    var remaining_time: t_count;
    assign remaining_time = next_time as t_count - current_time[PERIOD_WIDTH - 1:0] as t_count;

    always_ff (clk, reset) {
        if_reset {
            next_time = '0;
            trigger   = 1'b0;
        } else {
            if enable {
                trigger = 1'b0;
                if remaining_time <: 0 {
                    next_time = next_time + period;
                    trigger   = 1'b1;
                }
            } else {
                next_time = phase + period;
                trigger   = 1'b0;
            }
        }
    }
}
