
// 調整機構
module synctimer_adjust #(
    parameter TIMER_WIDTH    : u32 = 64                     , // タイマのbit幅
    parameter COUNTER_WIDTH  : u32 = 32                     , // 自クロックで経過時間カウンタのbit数
    parameter CALC_WIDTH     : u32 = 32                     , // タイマのうち計算に使う部分
    parameter ERROR_WIDTH    : u32 = 32                     , // 誤差計算時のbit幅
    parameter ERROR_Q        : u32 = 8                      , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJUST_WIDTH   : u32 = COUNTER_WIDTH + ERROR_Q, // 補正周期のbit幅
    parameter ADJUST_Q       : u32 = ERROR_Q                , // 補正周期に追加する固定小数点数bit数
    parameter PERIOD_WIDTH   : u32 = ERROR_WIDTH            , // 周期補正に使うbit数
    parameter PHASE_WIDTH    : u32 = ERROR_WIDTH            , // 位相補正に使うbit数
    parameter PERIOD_LPF_GAIN: u32 = 4                      , // 周期補正のLPFの更新ゲイン(1/2^N)
    parameter PHASE_LPF_GAIN : u32 = 4                      , // 位相補正のLPFの更新ゲイン(1/2^N)
    parameter DEBUG          : bit = 1'b0                   ,
    parameter SIMULATION     : bit = 1'b1                   ,
) (
    reset: input logic,
    clk  : input logic,

    param_phase_min: input signed logic<PHASE_WIDTH>,
    param_phase_max: input signed logic<PHASE_WIDTH>,

    local_time: input logic<TIMER_WIDTH>,

    correct_override: input logic             ,
    correct_time    : input logic<TIMER_WIDTH>,
    correct_valid   : input logic             ,

    adjust_sign : output logic,
    adjust_valid: output logic,
    adjust_ready: input  logic,

) {

    // type
    localparam t_count  : type = logic<COUNTER_WIDTH>;
    localparam t_count_q: type = logic<COUNTER_WIDTH + ADJUST_Q>;
    localparam t_calc   : type = logic<CALC_WIDTH>;
    localparam t_period : type = signed logic<PERIOD_WIDTH>;
    localparam t_phase  : type = signed logic<PHASE_WIDTH>;
    localparam t_error  : type = signed logic<ERROR_WIDTH + ERROR_Q>;
    localparam t_error_u: type = logic<ERROR_WIDTH + ERROR_Q>;
    localparam t_adjust : type = logic<ADJUST_WIDTH + ADJUST_Q>;


    // 固定小数点変換
    function PhaseToAdjust (
        phase: input t_phase,
    ) -> t_error {
        return phase as t_error <<< ERROR_Q;
    }

    function PeriodToAdjust (
        period: input t_period,
    ) -> t_error {
        return period as t_error <<< ERROR_Q;
    }


    // input
    var current_local_time  : t_calc;
    var current_correct_time: t_calc;
    assign current_local_time   = local_time as t_calc;
    assign current_correct_time = correct_time as t_calc;


    // stage 0
    var st0_previus_local_time  : t_calc ;
    var st0_previus_correct_time: t_calc ;
    var st0_local_period        : t_calc ;
    var st0_correct_period      : t_calc ;
    var st0_first               : logic  ;
    var st0_phase_error         : t_phase;
    var st0_valid               : logic  ;
    var st0_counter_trig        : logic  ;

    always_ff (clk, reset) {
        if_reset {
            st0_counter_trig         = 1'bx;
            st0_previus_local_time   = 'x;
            st0_previus_correct_time = 'x;
            st0_local_period         = 'x;
            st0_correct_period       = 'x;
            st0_first                = 1'b1;
            st0_phase_error          = 'x;
            st0_valid                = 1'b0;
        } else {
            st0_counter_trig = correct_valid;
            st0_valid = 1'b0;
            if correct_valid {
                st0_previus_local_time   = current_local_time;
                st0_previus_correct_time = current_correct_time;
                st0_local_period         = current_local_time - st0_previus_local_time;
                st0_correct_period       = current_correct_time - st0_previus_correct_time;

                st0_first       = 1'b0;
                st0_phase_error = (current_correct_time - current_local_time) as t_phase;
                if !(st0_first || correct_override) {
                    st0_valid = 1'b1;
                }
            }
        }
    }


    // stage 1
    var st1_first       : logic  ;
    var st1_phase_error : t_error;
    var st1_period_error: t_error;
    var st1_valid       : logic  ;
    var st1_counter_trig        : logic  ;

    always_ff (clk, reset) {
        if_reset {
            st1_counter_trig = 1'bx;
            st1_first        = 1'b1;
            st1_phase_error  = '0;
            st1_period_error = 'x;
            st1_valid        = 1'b0;
        } else {
            st1_counter_trig = st0_counter_trig;
            if st0_valid {
                st1_first       = 1'b0;
                st1_phase_error = PhaseToAdjust(st0_phase_error);
                if st0_phase_error <= param_phase_min {
                    st1_phase_error = PhaseToAdjust(param_phase_min);
                }
                if st0_phase_error >= param_phase_max {
                    st1_phase_error = PhaseToAdjust(param_phase_max);
                }
                st1_period_error = PeriodToAdjust((st0_correct_period - st0_local_period) as t_period);
            }
            st1_valid = st0_valid && !st1_first;

            if correct_valid && correct_override {
                st1_first = 1'b1;
            }

        }
    }
    var st1_phase_error_int : t_error;
    var st1_period_error_int: t_error;
    assign st1_phase_error_int  = st1_phase_error >>> ERROR_Q;
    assign st1_period_error_int = st1_period_error >>> ERROR_Q;


    // stage 2
    var st2_first        : logic  ;
    var st2_phase_adjust : t_error;
    var st2_period_adjust: t_error;
    var st2_valid        : logic  ;
    var st2_counter_trig        : logic  ;

    var st1_period_error_t : t_error ;
    assign st1_period_error_t = st1_period_error + st2_phase_adjust;  // st1_local_period に前回位相補正が含まれているのでその分相殺

    always_ff (clk, reset) {
        if_reset {
            st2_counter_trig  = 1'bx;
            st2_first         = 1'b1;
            st2_phase_adjust  = '0;
            st2_period_adjust = '0;
            st2_valid         = 1'b0;
        } else {
            st2_counter_trig = st1_counter_trig;
            if st1_valid {
                st2_first = 1'b0;

                // ゲインを与えてLPFをかける
                st2_phase_adjust = st1_phase_error >>> PHASE_LPF_GAIN;

                // ゲインを与えてLPFをかける
                st2_period_adjust += st1_period_error_t >>> PERIOD_LPF_GAIN;
            }
            st2_valid = st1_valid;

            if correct_valid && correct_override {
                st2_first = 1'b1;
            }
        }
    }

    // stage 3
    var st3_adjust: t_error;
    var st3_valid : logic  ;
    var st3_counter_trig        : logic  ;

    always_ff (clk, reset) {
        if_reset {
            st3_counter_trig = 1'bx;
            st3_adjust = 'x;
            st3_valid  = 1'b0;
        } else {
            st3_counter_trig = st2_counter_trig;
            st3_adjust = st2_period_adjust + st2_phase_adjust;
            st3_valid  = st2_valid;
        }
    }

    // stage 3
    var st4_counter_trig : logic    ;
    var st4_count : t_error_u; // 自クロックでの経過時刻計測
    var st4_adjust: t_error_u;
    var st4_sign  : logic    ;
    var st4_zero  : logic    ;
    var st4_valid : logic    ;

    always_ff (clk, reset) {
        if_reset {
            st4_sign   = 'x;
            st4_zero   = 'x;
            st4_adjust = 'x;
            st4_count  = 'x;
            st4_valid  = 1'b0;
            st4_counter_trig = 1'b0;
        } else {
            st4_count += 1'b1;
            if st4_counter_trig {
                st4_count = '0;
            }
            st4_counter_trig = st3_counter_trig;

            if st3_valid {
                st4_sign   = st3_adjust <: 0;
                st4_zero   = st3_adjust == 0;
                st4_adjust = if st3_adjust <: 0 {
                    (-st3_adjust) as t_error_u
                } else {
                    st3_adjust as t_error_u
                };
            }
            st4_valid = st3_valid;
        }
    }


    // divider
    var div_quotient : t_adjust ;
    var div_remainder: t_error_u;
    var div_valid    : logic    ;

    var tmp_ready: logic;
    inst i_divider_unsigned_multicycle: divider_unsigned_multicycle #(
        DIVIDEND_WIDTH: COUNTER_WIDTH + ERROR_Q,
        DIVISOR_WIDTH : ERROR_WIDTH + ERROR_Q  ,
        QUOTIENT_WIDTH: ADJUST_WIDTH + ADJUST_Q,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        s_dividend: st4_count as t_count_q << (ERROR_Q + ADJUST_Q),
        s_divisor : st4_adjust                                  ,
        s_valid   : st4_valid                                   ,
        s_ready   : tmp_ready                                   ,

        m_quotient : div_quotient ,
        m_remainder: div_remainder,
        m_valid    : div_valid    ,
        m_ready    : 1'b1         ,
    );


    // adjust parameter
    localparam ADJ_STEP: t_adjust = (1 << ADJUST_Q) as t_adjust;

    var adj_param_zero  : logic   ;
    var adj_param_sign  : logic   ;
    var adj_param_period: t_adjust;
    var adj_param_valid : logic   ;
    var adj_param_ready : logic   ;

    always_ff (clk, reset) {
        if_reset {
            adj_param_zero   = 1'b1;
            adj_param_sign   = 1'bx;
            adj_param_period = 'x;
            adj_param_valid  = 1'b0;
        } else {
            if adj_param_ready {
                adj_param_valid = 1'b0;
            }

            if div_valid {
                if st4_zero {
                    adj_param_zero   = 1'b1;
                    adj_param_sign   = 1'b0;
                    adj_param_period = '0;
                    adj_param_valid  = !adj_param_zero; // 変化があれば発行
                }
                else {
                    adj_param_zero   = st4_zero;
                    adj_param_sign   = st4_sign;
                    adj_param_period = div_quotient - ADJ_STEP;
                    adj_param_valid  = adj_param_zero || ((div_quotient - ADJ_STEP) != adj_param_period);
                }
            }
        }
    }

    // adjuster
    var adj_calc_zero  : logic   ;
    var adj_calc_sign  : logic   ;
    var adj_calc_period: t_adjust;
    var adj_calc_count : t_adjust;
    var adj_calc_next  : t_adjust;
    var adj_calc_valid : logic   ;

    always_ff (clk, reset) {
        if_reset {
            adj_calc_zero   = 1'b1;
            adj_calc_sign   = 'x;
            adj_calc_period = '0;
            adj_calc_count  = 'x;
            adj_calc_next   = 'x;
            adj_calc_valid  = 1'b0;
        } else {
            
            // adj_param_valid は連続で来ない、period は2以上の前提で事前計算
            adj_calc_count += (1 << ADJUST_Q) as t_adjust;
            adj_calc_next   = adj_calc_count - adj_calc_period;
            adj_calc_valid  = adj_calc_count >= adj_calc_period;
            
            if adj_calc_valid {
                if adj_param_valid {
                    adj_calc_zero   = adj_param_zero;
                    adj_calc_sign   = adj_param_sign;
                    adj_calc_period = adj_param_period;
                    adj_calc_count  = '0;
                }
                else {
                    adj_calc_count  = adj_calc_next;
                }
            }
        }
    }

    assign adj_param_ready = adj_calc_valid;


    // output
    always_ff (clk, reset) {
        if_reset {
            adjust_sign  = 'x;
            adjust_valid = 1'b0;
        } else {
            if adjust_ready {
                adjust_valid = 1'b0;
            }

            if adj_calc_valid {
                adjust_sign  = adj_calc_sign;
                adjust_valid = ~adj_calc_zero;
            }
        }
    }


    if SIMULATION : monitor {
        var monitor_local_time       : t_calc;
        var monitor_correct_time     : t_calc;
        var monitor_local_period     : t_calc;
        var monitor_correct_period   : t_calc;
        var monitor_phase_error      : real;
        var monitor_period_error     : real;
        var monitor_period_error_t   : real;
        var monitor_phase_adjust     : real;
        var monitor_period_adjust    : real;
        var monitor_total_adjust     : real;

        always_ff(clk) {
            if correct_valid {
                monitor_local_time   = current_local_time;
                monitor_correct_time = current_correct_time;
            }
            if st1_valid {
                monitor_period_error_t    = $itor(st1_period_error_t)  / $itor(2**ERROR_Q);
            }
        }

        assign monitor_correct_period    = st0_correct_period;
        assign monitor_local_period      = st0_local_period;
        assign monitor_phase_error       = $itor(st1_phase_error)   / $itor(2**ERROR_Q);
        assign monitor_period_error      = $itor(st1_period_error)  / $itor(2**ERROR_Q);
        assign monitor_phase_adjust      = $itor(st2_phase_adjust)  / $itor(2**ERROR_Q);
        assign monitor_period_adjust     = $itor(st2_period_adjust) / $itor(2**ERROR_Q);
        assign monitor_total_adjust      = $itor(st3_adjust)        / $itor(2**ERROR_Q);
    }
}
