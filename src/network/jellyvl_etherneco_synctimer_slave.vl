module etherneco_synctimer_slave #(
    parameter TIMER_WIDTH      : u32 = 64                             , // タイマのbit幅
    parameter NUMERATOR        : u32 = 10                             , // クロック周期の分子
    parameter DENOMINATOR      : u32 = 3                              , // クロック周期の分母
    parameter ADJ_COUNTER_WIDTH: u32 = 32                             , // 自クロックで経過時間カウンタのbit数
    parameter ADJ_CALC_WIDTH   : u32 = 32                             , // タイマのうち計算に使う部分
    parameter ADJ_ERROR_WIDTH  : u32 = 32                             , // 誤差計算時のbit幅
    parameter ADJ_ERROR_Q      : u32 = 8                              , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJ_ADJUST_WIDTH : u32 = ADJ_COUNTER_WIDTH + ADJ_ERROR_Q, // 補正周期のbit幅
    parameter ADJ_ADJUST_Q     : u32 = ADJ_ERROR_Q                    , // 補正周期に追加する固定小数点数bit数
    parameter ADJ_PERIOD_WIDTH : u32 = ADJ_ERROR_WIDTH                , // 周期補正に使うbit数
    parameter ADJ_PHASE_WIDTH  : u32 = ADJ_ERROR_WIDTH                , // 位相補正に使うbit数
) (
    reset: input logic,
    clk  : input logic,

    current_time: output logic<TIMER_WIDTH>,

    rx_start: input logic,
    rx_error: input logic,
    rx_end  : input logic,

    s_first: input logic   ,
    s_last : input logic   ,
    s_data : input logic<8>,
    s_valid: input logic   ,

    m_first: output logic   ,
    m_last : output logic   ,
    m_data : output logic<8>,
    m_valid: output logic   ,
) {

    localparam t_adj_phase: type = signed logic<ADJ_PHASE_WIDTH>;
    localparam t_time     : type = logic<TIMER_WIDTH>;

    var correct_override: logic ;
    var correct_time    : t_time;
    var correct_valid   : logic ;

    inst u_synctimer_core: synctimer_core #(
        TIMER_WIDTH      : TIMER_WIDTH      ,
        NUMERATOR        : NUMERATOR        ,
        DENOMINATOR      : DENOMINATOR      ,
        ADJ_COUNTER_WIDTH: ADJ_COUNTER_WIDTH,
        ADJ_CALC_WIDTH   : ADJ_CALC_WIDTH   ,
        ADJ_ERROR_WIDTH  : ADJ_ERROR_WIDTH  ,
        ADJ_ERROR_Q      : ADJ_ERROR_Q      ,
        ADJ_ADJUST_WIDTH : ADJ_ADJUST_WIDTH ,
        ADJ_ADJUST_Q     : ADJ_ADJUST_Q     ,
        ADJ_PERIOD_WIDTH : ADJ_PERIOD_WIDTH ,
        ADJ_PHASE_WIDTH  : ADJ_PHASE_WIDTH  ,
    ) (
        reset: reset,
        clk  : clk  ,

        adj_param_phase_min: -10 as t_adj_phase,
        adj_param_phase_max: +10 as t_adj_phase,

        set_time : '0  ,
        set_valid: 1'b0,

        current_time: current_time,

        correct_override: correct_override,
        correct_time    : correct_time    ,
        correct_valid   : correct_valid   ,
    );

    var local_reset: logic;
    assign local_reset = reset || rx_error;

    localparam t_count: type = logic<16>;

    var busy      : logic      ;
    var count     : t_count    ;
    var rx_node_id: logic  <8> ;
    var rx_cmd    : logic  <8> ;
    var rx_time   : t_time     ;
    var rx_offset : logic  <16>;

    always_ff (clk, local_reset) {
        if_reset {
            busy       = 1'b0;
            count      = '0;
            rx_node_id = 'x;
            rx_cmd     = 'x;
            rx_time    = 'x;
            rx_offset  = 'x;

            m_first = 'x;
            m_last  = 'x;
            m_data  = 'x;
            m_valid = 1'b0;
        } else {
            m_first = s_first;
            m_last  = s_last;
            m_data  = s_data;
            m_valid = s_valid;

            if s_valid {
                count = count + 1'b1;

                if !busy {
                    m_valid = 1'b0;
                    if s_first {
                        busy       = 1'b1;
                        count      = '0;
                        rx_node_id = s_data;
                        m_data     = s_data + 1;
                        m_valid    = s_valid;
                    }
                } else {
                    case count as int {
                        0: {
                            rx_cmd = s_data;
                        }
                        1: {
                            rx_time[0 * 8+:8] = s_data;
                        }
                        2: {
                            rx_time[1 * 8+:8] = s_data;
                        }
                        3: {
                            rx_time[2 * 8+:8] = s_data;
                        }
                        4: {
                            rx_time[3 * 8+:8] = s_data;
                        }
                        5: {
                            rx_time[4 * 8+:8] = s_data;
                        }
                        6: {
                            rx_time[5 * 8+:8] = s_data;
                        }
                        7: {
                            rx_time[6 * 8+:8] = s_data;
                        }
                        8: {
                            rx_time[7 * 8+:8] = s_data;
                        }
                        9: {
                            rx_offset[0 * 8+:8] = s_data;
                        }
                        10: {
                            rx_offset[1 * 8+:8] = s_data;
                        }
                        default: {
                            busy = 1'b0;
                        }
                    }
                    if s_last {
                        busy = 1'b0;
                    }
                }
            }
            if rx_start || rx_end || rx_error {
                busy = 1'b0;
            }
        }
    }

    always_ff (clk, reset) {
        if_reset {
            correct_override = 1'bx;
            correct_time     = 'x;
            correct_valid    = 1'b0;
        } else {
            correct_override = 1'bx;
            correct_time     = rx_time + rx_offset as t_time;
            correct_valid    = 1'b0;

            if rx_end {
                if rx_cmd == 8'h10 {
                    correct_override = 1'b1;
                    correct_valid    = 1'b1;
                } else {
                    correct_override = 1'b0;
                    correct_valid    = 1'b1;
                }
            }
        }
    }

}
