module etherneco_slave #(
    parameter TIMER_WIDTH      : u32 = 64                             , // タイマのbit幅
    parameter NUMERATOR        : u32 = 8                              , // クロック周期の分子
    parameter DENOMINATOR      : u32 = 1                              , // クロック周期の分母
    parameter ADJ_COUNTER_WIDTH: u32 = 32                             , // 自クロックで経過時間カウンタのbit数
    parameter ADJ_CALC_WIDTH   : u32 = 32                             , // タイマのうち計算に使う部分
    parameter ADJ_ERROR_WIDTH  : u32 = 32                             , // 誤差計算時のbit幅
    parameter ADJ_ERROR_Q      : u32 = 8                              , // 誤差計算時に追加する固定小数点数bit数
    parameter ADJ_ADJUST_WIDTH : u32 = ADJ_COUNTER_WIDTH + ADJ_ERROR_Q, // 補正周期のbit幅
    parameter ADJ_ADJUST_Q     : u32 = ADJ_ERROR_Q                    , // 補正周期に追加する固定小数点数bit数
    parameter ADJ_PERIOD_WIDTH : u32 = ADJ_ERROR_WIDTH                , // 周期補正に使うbit数
    parameter ADJ_PHASE_WIDTH  : u32 = ADJ_ERROR_WIDTH                , // 位相補正に使うbit数

) (
    reset: input logic,
    clk  : input logic,

    current_time: output logic<TIMER_WIDTH>,

    s_up_rx_first: input  logic   ,
    s_up_rx_last : input  logic   ,
    s_up_rx_data : input  logic<8>,
    s_up_rx_valid: input  logic   ,
    m_up_tx_first: output logic   ,
    m_up_tx_last : output logic   ,
    m_up_tx_data : output logic<8>,
    m_up_tx_valid: output logic   ,
    m_up_tx_ready: input  logic   ,

    s_down_rx_first: input  logic   ,
    s_down_rx_last : input  logic   ,
    s_down_rx_data : input  logic<8>,
    s_down_rx_valid: input  logic   ,
    m_down_tx_first: output logic   ,
    m_down_tx_last : output logic   ,
    m_down_tx_data : output logic<8>,
    m_down_tx_valid: output logic   ,
    m_down_tx_ready: input  logic   ,
) {


    // -------------------------------------
    //  Outer loop (request)
    // -------------------------------------

    // 上流からの受信
    var outer_rx_first: logic   ;
    var outer_rx_last : logic   ;
    var outer_rx_data : logic<8>;
    var outer_rx_valid: logic   ;

    var outer_rx_start: logic;
    var outer_rx_end  : logic;
    var outer_rx_error: logic;
    var outer_rx_length:logic<16>;

    inst u_etherneco_rx_outer: etherneco_rx (
        reset: reset,
        clk  : clk  ,

        rx_start: outer_rx_start,
        rx_end  : outer_rx_end  ,
        rx_error: outer_rx_error,
        rx_length: outer_rx_length,

        s_first: s_up_rx_first,
        s_last : s_up_rx_last ,
        s_data : s_up_rx_data ,
        s_valid: s_up_rx_valid,

        m_first: outer_rx_first,
        m_last : outer_rx_last ,
        m_data : outer_rx_data ,
        m_valid: outer_rx_valid,
    );


    // 同期タイマ(スレーブ)
    var outer_tx_first: logic   ;
    var outer_tx_last : logic   ;
    var outer_tx_data : logic<8>;
    var outer_tx_valid: logic   ;
    var outer_tx_ready: logic   ;

    inst u_etherneco_synctimer_slave: etherneco_synctimer_slave #(
        TIMER_WIDTH      : TIMER_WIDTH      ,
        NUMERATOR        : NUMERATOR        ,
        DENOMINATOR      : DENOMINATOR      ,
        ADJ_COUNTER_WIDTH: ADJ_COUNTER_WIDTH,
        ADJ_CALC_WIDTH   : ADJ_CALC_WIDTH   ,
        ADJ_ERROR_WIDTH  : ADJ_ERROR_WIDTH  ,
        ADJ_ERROR_Q      : ADJ_ERROR_Q      ,
        ADJ_ADJUST_WIDTH : ADJ_ADJUST_WIDTH ,
        ADJ_ADJUST_Q     : ADJ_ADJUST_Q     ,
        ADJ_PERIOD_WIDTH : ADJ_PERIOD_WIDTH ,
        ADJ_PHASE_WIDTH  : ADJ_PHASE_WIDTH  ,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time,

        rx_start: outer_rx_start,
        rx_error: outer_rx_error,
        rx_end  : outer_rx_end  ,

        s_first: outer_rx_first,
        s_last : outer_rx_last ,
        s_data : outer_rx_data ,
        s_valid: outer_rx_valid,

        m_first: outer_tx_first,
        m_last : outer_tx_last ,
        m_data : outer_tx_data ,
        m_valid: outer_tx_valid,
    );

    // さらに下流に流す
    inst u_etherneco_tx_outer: etherneco_tx #(
        FIFO_PTR_WIDTH : 5,
    )
    (
        reset: reset,
        clk  : clk  ,

        tx_start : outer_rx_start,
        tx_length: outer_rx_length,

        tx_cancel: outer_rx_error,

        s_last : outer_tx_last ,
        s_data : outer_tx_data ,
        s_valid: outer_tx_valid,
        s_ready: outer_tx_ready,

        m_first: m_down_tx_first,
        m_last : m_down_tx_last ,
        m_data : m_down_tx_data ,
        m_valid: m_down_tx_valid,
        m_ready: m_down_tx_ready,
    );



    // -------------------------------------
    //  Inner loop (response)
    // -------------------------------------


}
