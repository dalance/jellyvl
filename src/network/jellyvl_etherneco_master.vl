module etherneco_master #(
    parameter TIMER_WIDTH: u32 = 64, // タイマのbit幅
    parameter NUMERATOR  : u32 = 8 , // クロック周期の分子
    parameter DENOMINATOR: u32 = 1 , // クロック周期の分母
) (
    reset: input logic,
    clk  : input logic,

    current_time: output logic<TIMER_WIDTH>,

    s_down_rx_first: input  logic   ,
    s_down_rx_last : input  logic   ,
    s_down_rx_data : input  logic<8>,
    s_down_rx_valid: input  logic   ,
    m_down_tx_first: output logic   ,
    m_down_tx_last : output logic   ,
    m_down_tx_data : output logic<8>,
    m_down_tx_valid: output logic   ,
    m_down_tx_ready: input  logic   ,

    s_up_rx_first: input  logic   ,
    s_up_rx_last : input  logic   ,
    s_up_rx_data : input  logic<8>,
    s_up_rx_valid: input  logic   ,
    m_up_tx_first: output logic   ,
    m_up_tx_last : output logic   ,
    m_up_tx_data : output logic<8>,
    m_up_tx_valid: output logic   ,
    m_up_tx_ready: input  logic   ,
) {


    // -------------------------------------
    //  Control
    // -------------------------------------

    localparam PERIOD_WIDTH: u32 = 32;

    var timsync_trigger : logic    ;
    var timsync_override: logic    ;
    var request_type    : logic<8> ;
    var request_node    : logic<8> ;
    var request_length  : logic<16>;

    // とりあえず時間合わせパケットに固定
    assign request_type   = 8'h10;
    assign request_node   = 8'h00;
    assign request_length = 16'd13 - 16'd1;


    // 通信タイミング生成
    inst u_periodic_trigger: periodic_trigger #(
        TIMER_WIDTH : TIMER_WIDTH ,
        PERIOD_WIDTH: PERIOD_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        enable: 1'b1     ,
        phase : '0       ,
        period: 32'd20000,

        current_time: current_time,

        trigger: timsync_trigger,
    );

    always_ff (clk, reset) {
        if_reset {
            timsync_override = 1'b1;
        } else {
            if timsync_trigger {
                timsync_override = 1'b0;
            }
        }
    }


    // -------------------------------------
    //  outer ring (request)
    // -------------------------------------

    var outer_tx_last : logic   ;
    var outer_tx_data : logic<8>;
    var outer_tx_valid: logic   ;
    var outer_tx_ready: logic   ;

    // タイマ合わせマスター
    inst u_etherneco_synctimer_master: etherneco_synctimer_master #(
        TIMER_WIDTH: TIMER_WIDTH,
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time,

        sync_start   : timsync_trigger ,
        sync_override: timsync_override,

        m_outer_tx_last : outer_tx_last ,
        m_outer_tx_data : outer_tx_data ,
        m_outer_tx_valid: outer_tx_valid,
        m_outer_tx_ready: outer_tx_ready,
    );

    inst u_etherneco_packet_tx_outer: etherneco_packet_tx (
        reset: reset,
        clk  : clk  ,

        tx_start : timsync_trigger,
        tx_length: request_length ,
        tx_type  : request_type   ,
        tx_node  : request_node   ,

        tx_cancel: 1'b0,

        s_last : outer_tx_last ,
        s_data : outer_tx_data ,
        s_valid: outer_tx_valid,
        s_ready: outer_tx_ready,

        m_first: m_down_tx_first,
        m_last : m_down_tx_last ,
        m_data : m_down_tx_data ,
        m_valid: m_down_tx_valid,
        m_ready: m_down_tx_ready,
    );


    // 一周してきたパケットの受信
    var outer_rx_first: logic   ;
    var outer_rx_last : logic   ;
    var outer_rx_data : logic<8>;
    var outer_rx_valid: logic   ;
    var outer_rx_ready: logic   ;

    var outer_rx_start : logic    ;
    var outer_rx_end   : logic    ;
    var outer_rx_error : logic    ;
    var outer_rx_length: logic<16>;
    var outer_rx_type  : logic<8> ;
    var outer_rx_node  : logic<8> ;

    inst u_etherneco_packet_rx_outer: etherneco_packet_rx_old (
        reset: reset,
        clk  : clk  ,

        rx_start : outer_rx_start ,
        rx_end   : outer_rx_end   ,
        rx_error : outer_rx_error ,
        rx_length: outer_rx_length,
        rx_type  : outer_rx_type  ,
        rx_node  : outer_rx_node  ,

        s_first: s_up_rx_first,
        s_last : s_up_rx_last ,
        s_data : s_up_rx_data ,
        s_valid: s_up_rx_valid,

        m_first: outer_rx_first,
        m_last : outer_rx_last ,
        m_data : outer_rx_data ,
        m_valid: outer_rx_valid,
    );


    // -------------------------------------
    //  inner ring (response)
    // -------------------------------------

    /*
    var inner_tx_last : logic   ;
    var inner_tx_data : logic<8>;
    var inner_tx_valid: logic   ;
    var inner_tx_ready: logic   ;
    */

    inst u_etherneco_packet_tx_inner: etherneco_packet_tx #(
        FIFO_PTR_WIDTH: 5,
    ) (
        reset: reset,
        clk  : clk  ,

        tx_start : outer_rx_start       ,
        tx_length: outer_rx_length      ,
        tx_type  : outer_rx_type | 8'h80,
        tx_node  : outer_rx_node - 1'b1 ,

        tx_cancel: outer_rx_error,

        s_last : outer_rx_last ,
        s_data : outer_rx_data ,
        s_valid: outer_rx_valid,
        s_ready: outer_rx_ready,

        m_first: m_up_tx_first,
        m_last : m_up_tx_last ,
        m_data : m_up_tx_data ,
        m_valid: m_up_tx_valid,
        m_ready: m_up_tx_ready,
    );


    /*
    var outer_rx_last : logic   ;
    var outer_rx_data : logic<8>;
    var outer_rx_valid: logic   ;
    var outer_rx_ready: logic   ;
    */

}
