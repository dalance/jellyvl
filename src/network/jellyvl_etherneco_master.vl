module etherneco_master #(
    parameter TIMER_WIDTH: u32 = 64, // タイマのbit幅
    parameter NUMERATOR  : u32 = 8 , // クロック周期の分子
    parameter DENOMINATOR: u32 = 1 , // クロック周期の分母
) (
    reset: input logic,
    clk  : input logic,

    current_time: output logic<TIMER_WIDTH>,

    m_down_tx_first: output logic   ,
    m_down_tx_last : output logic   ,
    m_down_tx_data : output logic<8>,
    m_down_tx_valid: output logic   ,
    m_down_tx_ready: input  logic   ,
    s_down_rx_first: input  logic   ,
    s_down_rx_last : input  logic   ,
    s_down_rx_data : input  logic<8>,
    s_down_rx_valid: input  logic   ,

    m_up_tx_first: output logic   ,
    m_up_tx_last : output logic   ,
    m_up_tx_data : output logic<8>,
    m_up_tx_valid: output logic   ,
    m_up_tx_ready: input  logic   ,
    s_up_rx_first: input  logic   ,
    s_up_rx_last : input  logic   ,
    s_up_rx_data : input  logic<8>,
    s_up_rx_valid: input  logic   ,
) {


    // -------------------------------------
    //  Ring bus
    // -------------------------------------

    // Outer ring TX (send command)
    var cmd_tx_payload_last : logic   ;
    var cmd_tx_payload_data : logic<8>;
    var cmd_tx_payload_valid: logic   ;
    var cmd_tx_payload_ready: logic   ;

    inst u_etherneco_packet_tx_up: etherneco_packet_tx (
        reset: reset,
        clk  : clk  ,

        tx_start : timsync_trigger,
        tx_length: request_length ,
        tx_type  : request_type   ,
        tx_node  : request_node   ,

        tx_cancel: 1'b0,

        s_payload_last : cmd_tx_payload_last ,
        s_payload_data : cmd_tx_payload_data ,
        s_payload_valid: cmd_tx_payload_valid,
        s_payload_ready: cmd_tx_payload_ready,

        m_tx_first: m_down_tx_first,
        m_tx_last : m_down_tx_last ,
        m_tx_data : m_down_tx_data ,
        m_tx_valid: m_down_tx_valid,
        m_tx_ready: m_down_tx_ready,
    );


    // Outer ring RX and Inner ring TX (return)
    var return_rx_start     : logic    ;
    var return_rx_end       : logic    ;
    var return_rx_error     : logic    ;
    var return_rx_length    : logic<16>;
    var return_rx_type      : logic<8> ;
    var return_rx_node      : logic<8> ;

    var return_payload_first: logic    ;
    var return_payload_last : logic    ;
    var return_payload_pos  : logic<16>;
    var return_payload_data : logic<8> ;
    var return_payload_valid: logic    ;
    var return_replace_data : logic<8> ;
    var return_replace_valid: logic    ;

    inst u_etherneco_packet_return: etherneco_packet_rx #(
        DOWN_STREAM  : 1'b1,
        REPLACE_DELAY: 1   ,
    ) (
        reset: reset,
        clk  : clk  ,

        s_rx_first: s_up_rx_first,
        s_rx_last : s_up_rx_last ,
        s_rx_data : s_up_rx_data ,
        s_rx_valid: s_up_rx_valid,

        m_tx_first: m_up_tx_first,
        m_tx_last : m_up_tx_last ,
        m_tx_data : m_up_tx_data ,
        m_tx_valid: m_up_tx_valid,

        rx_start : return_rx_start ,
        rx_end   : return_rx_end   ,
        rx_error : return_rx_error ,
        rx_length: return_rx_length,
        rx_type  : return_rx_type  ,
        rx_node  : return_rx_node  ,
        payload_first: return_payload_first,
        payload_last : return_payload_last ,
        payload_pos  : return_payload_pos  ,
        payload_data : return_payload_data ,
        payload_valid: return_payload_valid,
        replace_data : return_replace_data ,
        replace_valid: return_replace_valid,
    );


    // Inner ring RX (receive response)
    var resp_rx_start : logic    ;
    var resp_rx_end   : logic    ;
    var resp_rx_error : logic    ;
    var resp_rx_length: logic<16>;
    var resp_rx_type  : logic<8> ;
    var resp_rx_node  : logic<8> ;

    var terminate_first: logic;
    var terminate_last : logic;
    var terminate_data : logic<8>;
    var terminate_valid: logic;

    var resp_payload_first: logic    ;
    var resp_payload_last : logic    ;
    var resp_payload_pos  : logic<16>;
    var resp_payload_data : logic<8> ;
    var resp_payload_valid: logic    ;
    var resp_replace_data : logic<8> ;
    var resp_replace_valid: logic    ;

    inst u_etherneco_packet_down: etherneco_packet_rx #(
        DOWN_STREAM  : 1'b0,
        REPLACE_DELAY: 0   ,
    ) (
        reset: reset,
        clk  : clk  ,

        s_rx_first: s_down_rx_first,
        s_rx_last : s_down_rx_last ,
        s_rx_data : s_down_rx_data ,
        s_rx_valid: s_down_rx_valid,

        m_tx_first: terminate_first,
        m_tx_last : terminate_last ,
        m_tx_data : terminate_data ,
        m_tx_valid: terminate_valid,
        
        rx_start : resp_rx_start ,
        rx_end   : resp_rx_end   ,
        rx_error : resp_rx_error ,
        rx_length: resp_rx_length,
        rx_type  : resp_rx_type  ,
        rx_node  : resp_rx_node  ,

        payload_first: resp_payload_first,
        payload_last : resp_payload_last ,
        payload_pos  : resp_payload_pos  ,
        payload_data : resp_payload_data ,
        payload_valid: resp_payload_valid,
        replace_data : resp_replace_data ,
        replace_valid: resp_replace_valid,
    );

    assign resp_replace_data  = '0;
    assign resp_replace_valid = '0;




    // -------------------------------------
    //  Control
    // -------------------------------------

    localparam PERIOD_WIDTH: u32 = 32;

    var timsync_trigger : logic    ;
    var timsync_override: logic    ;
    var request_type    : logic<8> ;
    var request_node    : logic<8> ;
    var request_length  : logic<16>;

    // とりあえず時間合わせパケットに固定
    assign request_type   = 8'h10;
    assign request_node   = 8'h00;
    assign request_length = 16'd13 - 16'd1;


    // 通信タイミング生成
    inst u_periodic_trigger: periodic_trigger #(
        TIMER_WIDTH : TIMER_WIDTH ,
        PERIOD_WIDTH: PERIOD_WIDTH,
    ) (
        reset: reset,
        clk  : clk  ,

        enable: 1'b1     ,
        phase : '0       ,
        period: 32'd20000,

        current_time: current_time,

        trigger: timsync_trigger,
    );

    always_ff (clk, reset) {
        if_reset {
            timsync_override = 1'b1;
        } else {
            if timsync_trigger {
                timsync_override = 1'b0;
            }
        }
    }


    // タイマ合わせマスター
    inst u_etherneco_synctimer_master: etherneco_synctimer_master #(
        TIMER_WIDTH: TIMER_WIDTH,
        NUMERATOR  : NUMERATOR  ,
        DENOMINATOR: DENOMINATOR,
    ) (
        reset: reset,
        clk  : clk  ,

        current_time: current_time,

        sync_start   : timsync_trigger ,
        sync_override: timsync_override,

        m_cmd_tx_last : cmd_tx_payload_last ,
        m_cmd_tx_data : cmd_tx_payload_data ,
        m_cmd_tx_valid: cmd_tx_payload_valid,
        m_cmd_tx_ready: cmd_tx_payload_ready,

        return_rx_start     : return_rx_start     ,
        return_rx_end       : return_rx_end       ,
        return_rx_error     : return_rx_error     ,
        return_rx_length    : return_rx_length    ,
        return_rx_type      : return_rx_type      ,
        return_rx_node      : return_rx_node      ,
        return_payload_first: return_payload_first,
        return_payload_last : return_payload_last ,
        return_payload_pos  : return_payload_pos  ,
        return_payload_data : return_payload_data ,
        return_payload_valid: return_payload_valid,
        return_replace_data : return_replace_data  ,
        return_replace_valid: return_replace_valid ,

        resp_rx_start       : resp_rx_start       ,
        resp_rx_end         : resp_rx_end         ,
        resp_rx_error       : resp_rx_error       ,
        resp_rx_length      : resp_rx_length      ,
        resp_rx_type        : resp_rx_type        ,
        resp_rx_node        : resp_rx_node        ,
        resp_payload_first  : resp_payload_first  ,
        resp_payload_last   : resp_payload_last   ,
        resp_payload_pos    : resp_payload_pos    ,
        resp_payload_data   : resp_payload_data   ,
        resp_payload_valid  : resp_payload_valid  ,
    );


}
