module etherneco_packet_rx_old #() (
    reset: input logic,
    clk  : input logic,

    rx_start : output logic    ,
    rx_end   : output logic    ,
    rx_error : output logic    ,
    rx_length: output logic<16>,
    rx_type  : output logic<8> ,
    rx_node  : output logic<8> ,

    s_first: input logic   ,
    s_last : input logic   ,
    s_data : input logic<8>,
    s_valid: input logic   ,

    m_first: output logic   ,
    m_last : output logic   ,
    m_data : output logic<8>,
    m_valid: output logic   ,
) {

    enum STATE: logic<7> {
        IDLE = 7'b0000000,
        LENGTH = 7'b0000010,
        TYPE = 7'b0000100,
        NODE = 7'b0001000,
        PAYLOAD = 7'b0010000,
        FCS = 7'b0100000,
        ERROR = 7'b1000000,
    }

    localparam t_count : type = logic<4>;
    localparam t_length: type = logic<16>;

    var state        : STATE       ;
    var count        : t_count     ;
    var length       : t_length    ;
    var preamble     : logic       ;
    var payload_first: logic       ;
    var payload_last : logic       ;
    var fcs_last     : logic       ;
    var crc_update   : logic       ;
    var crc_check    : logic       ;
    var crc_value    : logic   <32>;

    var length_next: t_length;
    assign length_next = length - 1'b1;

    always_ff (clk, reset) {
        if_reset {
            rx_start  = 1'b0;
            rx_end    = 1'b0;
            rx_error  = 1'b0;
            rx_length = 'x;
            rx_type   = 'x;
            rx_node   = 'x;

            m_first = 'x;
            m_last  = 'x;
            m_data  = 'x;
            m_valid = 1'b0;

            state         = STATE::IDLE;
            count         = 'x;
            length        = 'x;
            preamble      = 1'b0;
            payload_first = 1'bx;
            payload_last  = 1'bx;
            fcs_last      = 'x;
            crc_update    = 'x;
            crc_check     = 1'b0;
        } else {
            rx_start  = 1'b0;
            rx_end    = 1'b0;
            rx_error  = 1'b0;
            crc_check = 1'b0;
            m_first   = 1'bx;
            m_last    = 1'bx;
            m_data    = s_data;
            m_valid   = 1'b0;

            if s_valid {
                if count != '1 {
                    count = count + 1'b1;
                }

                payload_first = 1'bx;
                payload_last  = 1'bx;
                fcs_last      = 1'bx;

                case state {
                    STATE::IDLE: {
                        if preamble && (s_data == 8'hd5) && (count >= 5 && count <= 7) {
                            state      = STATE::LENGTH;
                            count      = '0;
                            crc_update = 1'b0;
                        }
                    }

                    STATE::LENGTH: {
                        if ~count[0] {
                            length[7:0] = s_data;
                            crc_update  = 1'b1;
                            m_first     = 1'bx;
                            m_last      = 1'bx;
                        } else {
                            length[15:8] = s_data;
                            rx_length    = {s_data, length[7:0]};
                            state        = STATE::TYPE;

                            /*
                            state         = STATE::PAYLOAD;
                            count         = '0;
                            length[15:8]  = s_data;
                            payload_first = 1'b1;
                            payload_last  = ({s_data, length[7:0]} == 16'd0);
                            rx_length     = {s_data, length[7:0]};
                            */

                        }
                    }

                    STATE::TYPE: {
                        rx_type = s_data;
                        state   = STATE::NODE;
                    }

                    STATE::NODE: {
                        rx_node       = s_data;
                        state         = STATE::PAYLOAD;
                        payload_first = 1'b1;
                        payload_last  = (length == 16'd0);
                    }

                    STATE::PAYLOAD: {
                        length        = length_next;
                        payload_first = 1'b0;
                        payload_last  = (length_next == '0);
                        m_first       = payload_first;
                        m_last        = payload_last;
                        m_valid       = 1'b1;
                        if payload_last {
                            state    = STATE::FCS;
                            fcs_last = 1'b0;
                            count    = '0;
                            length   = 'x;
                        }
                    }

                    STATE::FCS: {
                        fcs_last = (count[1:0] == 2'd2);
                        if fcs_last {
                            state     = STATE::IDLE;
                            crc_check = 1'b1;
                        }
                    }

                    default: {
                        state = STATE::IDLE;
                    }
                }

                if s_data != 8'h55 {
                    preamble = 1'b0;
                }

                if s_first {
                    count    = '0;
                    preamble = (s_data == 8'h55);
                    rx_start = (state == STATE::IDLE);
                }

                if (s_first && state != STATE::IDLE && state != STATE::ERROR) || (s_last && !(state == STATE::FCS && fcs_last) && state != STATE::IDLE && state != STATE::ERROR) {
                    state    = STATE::ERROR;
                    rx_error = 1'b1;
                    m_first  = 'x;
                    m_last   = 'x;
                    m_data   = 'x;
                    m_valid  = 1'b0;
                }
            }

            if state == STATE::ERROR {
                state   = STATE::IDLE;
                m_first = 'x;
                m_last  = 'x;
                m_data  = 'x;
                m_valid = 1'b0;
            }

            if crc_check {
                if crc_value == 32'h2144df1c {
                    rx_end = 1'b1;
                } else {
                    rx_error = 1'b1;
                }
            }
        }
    }

    inst u_cacl_crc: jelly2_calc_crc #(
        DATA_WIDTH: 8           ,
        CRC_WIDTH : 32          ,
        POLY_REPS : 32'h04C11DB7,
        REVERSED  : 0           ,
    ) (
        reset: reset,
        clk  : clk  ,
        cke  : 1'b1 ,

        in_update: crc_update,
        in_data  : s_data    ,
        in_valid : s_valid   ,

        out_crc: crc_value,
    );

}
